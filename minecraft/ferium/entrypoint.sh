#!/bin/bash
getent group ${GID}
exit_result=$(echo $?)
if [ ${exit_result} == 0 ]; then
    echo "GID exists, adding existing group..."
    GROUP=$(getent group ${GID} | cut -d: -f1)
    adduser -g "Minecraft server user" -h "/minecraft" -s "/bin/bash" -D -u ${UID} --ingroup ${GROUP} minecraft
else
    echo "GID does not exist, creating group..."
    addgroup -g ${GID} minecraft
    adduser -g "Minecraft server user" -h "/minecraft" -s "/bin/bash" -D -u ${UID} --ingroup minecraft minecraft
    addgroup minecraft users
fi

echo -e "UID: $(id -u minecraft)"
echo -e "GID: $(id -g minecraft)"

# eula.txt, use EULA env from docker
echo -e "Generated by $(uname -a)\neula=${EULA}" > /minecraft/eula.txt

mkdir -p /minecraft/logs
mkdir -p /minecraft/mods
mkdir -p /minecraft/config
mkdir -p /minecraft/scripts

# Rather than download the server jar, it's baked into the image
# This statement is to avoid having the persistent volume having outdated jars.
# On the first run, copy the jar to the persistent volume
RED='\033[1;31m'
NC='\033[0m' # No Color
EXAMPLE="
#!/bin/bash
echo -e \"This is a custom script.\"
echo -e \"It can be found in the minecraft/scripts/ directory.\"
echo -e \"Add any bash script ending with a ${RED}.sh${NC} to be executed before server launch.\"
echo -e \"These scripts will be executed on container start\"
echo -e \"This script is an example, and can be removed.\"
"

if [ ! -e /jars/copied ]; then
    cp /jars/*.jar /minecraft/
    cp /minecraft/ferium.log /minecraft/logs/ferium.log.$(date +%s)
    rm -f /minecraft/ferium.log
    touch /minecraft/scripts/example.sh
    echo "$EXAMPLE" > /minecraft/scripts/example.sh
    touch /jars/copied
fi

chown -R ${UID}:${GID} /minecraft/

su "minecraft" -c "exec /auto-script.sh pre"
su "minecraft" -c "exec /update.sh"
su "minecraft" -c "exec /auto-script.sh post"
echo -e "Starting server..."
su "minecraft" -c "exec /usr/bin/java -Xmx${MEMORY} -Xms${MEMORY} -jar fabric-server-launch.jar & echo \$! > /tmp/server.pid"

trap "echo -e \"Stopping server...\"; kill -SIGTERM $(cat /tmp/server.pid); exit 0" SIGINT SIGTERM
while [ -e /proc/$(cat /tmp/server.pid) ]; do
    sleep 0.5
done
echo -e "Server stopped."
