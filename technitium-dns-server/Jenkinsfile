pipeline {
    environment{
        AMD64BUILD=''
    }
    agent any
    stages {
        stage('Buildx setup'){
            steps{
                script{
                    sh "docker buildx create --name techdns-builder --use"
                    sh "docker buildx inspect --bootstrap"
                }
            }
        }
        stage('Parallel builds'){
            parallel {
                stage('Start AMD64 build'){
                    steps{
                        script{
                            def res = build 'technitium-dns-amd64'
                            echo "AMD64 build finished"
                            AMD64BUILD=res.number
                        }
                    }
                    post{
                        failure{
                            echo "AMD64 build failed"
                        }
                    }
                }
            }
        }

        stage('Update manifest'){
            steps{
                script{
                    echo "AMD64BUILD: ${AMD64BUILD}"
                    withCredentials([usernamePassword( credentialsId: 'DockerhubCredentials', usernameVariable: 'USER', passwordVariable: 'PASSWORD')]) {
                        sh "echo $PASSWORD | docker login -u $USER --password-stdin"
                        sh "docker pull tetricz/technitium-dns-server:amd64-build-${AMD64BUILD}"
                        sh "docker manifest create tetricz/technitium-dns-server:latest tetricz/technitium-dns-server:amd64-build-${AMD64BUILD}"
                        sh "docker manifest push tetricz/technitium-dns-server:latest"
                    }
                }
            }
        }
    }
    post {
		always {
            sh 'docker buildx prune --builder=techdns-builder -fa'
            sh 'docker buildx rm techdns-builder'
            sh "docker manifest rm tetricz/technitium-dns-server:latest"
			sh 'docker logout'
		}
	}
}
